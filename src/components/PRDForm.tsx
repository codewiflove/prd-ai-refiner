import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { useToast } from "@/hooks/use-toast";

interface PRDData {
  appName: string;
  description: string;
  targetAudience: string;
  platform: string;
  primaryGoals: string;
  keyFeatures: string;
  techStack: string;
  timeline: string;
}

interface PRDFormProps {
  onPRDGenerated: (prd: string) => void;
}

export const PRDForm = ({ onPRDGenerated }: PRDFormProps) => {
  const { toast } = useToast();
  const [formData, setFormData] = useState<PRDData>({
    appName: "",
    description: "",
    targetAudience: "",
    platform: "",
    primaryGoals: "",
    keyFeatures: "",
    techStack: "",
    timeline: ""
  });

  const handleInputChange = (field: keyof PRDData, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const generatePRD = () => {
    // Basic validation
    if (!formData.appName || !formData.description) {
      toast({
        title: "Missing Information",
        description: "Please fill in at least the app name and description.",
        variant: "destructive"
      });
      return;
    }

    // Generate PRD based on form data
    const prd = `# Product Requirements Document

## Project Brief
**Name:** ${formData.appName}

**Description:** ${formData.description}

## Target Audience
${formData.targetAudience || "Not specified"}

## Platform
${formData.platform || "Not specified"}

## Primary Goals
${formData.primaryGoals || "Not specified"}

## Key Features
${formData.keyFeatures || "Not specified"}

## Tech Stack
${formData.techStack || "Not specified"}

## Timeline
${formData.timeline || "Not specified"}

## User Flows
1. **User Registration Flow:** Users can sign up and create an account
2. **Main Feature Flow:** Users can access and use the primary features
3. **Settings Flow:** Users can configure their preferences

## UI/UX Requirements
- Modern and intuitive interface
- Responsive design for all devices
- Accessible design following WCAG guidelines
- Fast loading times and smooth interactions

## Success Metrics
- User adoption rate
- Feature usage analytics
- User satisfaction scores
- Performance benchmarks

---
*Generated by PRD Genie*`;

    // Store in localStorage
    localStorage.setItem('currentPRD', prd);
    localStorage.setItem('prdData', JSON.stringify(formData));

    onPRDGenerated(prd);

    toast({
      title: "PRD Generated!",
      description: "Your Product Requirements Document has been created successfully."
    });
  };

  return (
    <Card className="p-6 bg-card/50 backdrop-blur-sm border-border animate-float hover:animate-glow-pulse transition-all duration-500 will-change-transform shadow-cosmic hover:shadow-glow">
      <div className="space-y-6">
        <div>
          <h2 className="text-2xl font-bold mb-2">Generate Your PRD</h2>
          <p className="text-muted-foreground">
            Fill in the details about your app idea to generate a comprehensive Product Requirements Document.
          </p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="space-y-2">
            <Label htmlFor="appName">App Name *</Label>
            <Input
              id="appName"
              placeholder="Enter your app name"
              value={formData.appName}
              onChange={(e) => handleInputChange("appName", e.target.value)}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="platform">Platform</Label>
            <Select onValueChange={(value) => handleInputChange("platform", value)}>
              <SelectTrigger>
                <SelectValue placeholder="Select platform" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="web">Web Application</SelectItem>
                <SelectItem value="mobile">Mobile App</SelectItem>
                <SelectItem value="desktop">Desktop Application</SelectItem>
                <SelectItem value="cross-platform">Cross-Platform</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>

        <div className="space-y-2">
          <Label htmlFor="description">App Description *</Label>
          <Textarea
            id="description"
            placeholder="Describe what your app does and its main purpose..."
            value={formData.description}
            onChange={(e) => handleInputChange("description", e.target.value)}
            rows={3}
          />
        </div>

        <div className="space-y-2">
          <Label htmlFor="targetAudience">Target Audience</Label>
          <Input
            id="targetAudience"
            placeholder="Who is your app for? (e.g., developers, students, businesses)"
            value={formData.targetAudience}
            onChange={(e) => handleInputChange("targetAudience", e.target.value)}
          />
        </div>

        <div className="space-y-2">
          <Label htmlFor="primaryGoals">Primary Goals</Label>
          <Textarea
            id="primaryGoals"
            placeholder="What are the main objectives of your app?"
            value={formData.primaryGoals}
            onChange={(e) => handleInputChange("primaryGoals", e.target.value)}
            rows={2}
          />
        </div>

        <div className="space-y-2">
          <Label htmlFor="keyFeatures">Key Features</Label>
          <Textarea
            id="keyFeatures"
            placeholder="List the main features your app will have..."
            value={formData.keyFeatures}
            onChange={(e) => handleInputChange("keyFeatures", e.target.value)}
            rows={3}
          />
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="space-y-2">
            <Label htmlFor="techStack">Tech Stack</Label>
            <Input
              id="techStack"
              placeholder="React, Node.js, MongoDB, etc."
              value={formData.techStack}
              onChange={(e) => handleInputChange("techStack", e.target.value)}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="timeline">Timeline</Label>
            <Input
              id="timeline"
              placeholder="e.g., 3 months, 6 weeks"
              value={formData.timeline}
              onChange={(e) => handleInputChange("timeline", e.target.value)}
            />
          </div>
        </div>

        <Button 
          onClick={generatePRD}
          variant="cosmic"
          size="lg"
          className="w-full animate-shimmer bg-gradient-cosmic bg-[length:200%_100%] hover:scale-105 transition-transform duration-300"
        >
          Generate PRD
        </Button>
      </div>
    </Card>
  );
};